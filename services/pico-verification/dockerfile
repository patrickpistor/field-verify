FROM rust:latest as builder

# Install dependencies
RUN apt-get update && \
    apt-get install -y git build-essential cmake pkg-config libssl-dev

# Install specific nightly version required by Pico
RUN rustup install nightly-2024-11-27 && \
    rustup default nightly-2024-11-27 && \
    rustup component add rust-src --toolchain nightly-2024-11-27

# Clone Pico repo and install CLI from local path
WORKDIR /tmp
RUN git clone https://github.com/brevis-network/pico
WORKDIR /tmp/pico/sdk/cli
RUN cargo install --locked --force --path .

# Create a fresh Pico project
WORKDIR /app
RUN cargo pico new --template basic material-verification

# Copy our verification code over the template code
COPY verification-app/app/src/main.rs /app/material-verification/app/src/main.rs

# Try to build the RISC-V verification program
WORKDIR /app/material-verification
RUN ls -la
WORKDIR /app/material-verification/app
RUN ls -la && RUST_BACKTRACE=full cargo pico build

# Build the main application
WORKDIR /app
COPY src /app/src
COPY Cargo.toml /app/Cargo.toml
RUN cargo build --release

# Runtime image
FROM ubuntu:22.04

# Install dependencies
RUN apt-get update && \
    apt-get install -y ca-certificates curl build-essential && \
    rm -rf /var/lib/apt/lists/*

# Create directories
WORKDIR /app
RUN mkdir -p /data/input /data/output
RUN mkdir -p /app/verification-app/elf

# Copy compiled binaries
COPY --from=builder /app/target/release/material-pico-verify /usr/local/bin/
COPY --from=builder /app/material-verification/elf/riscv32im-pico-zkvm-elf /app/verification-app/elf/

# Set environment variables
ENV RUST_LOG=info

# Set entrypoint
ENTRYPOINT ["material-pico-verify", "--input", "/data/input/certification.json", "--output", "/data/output"]